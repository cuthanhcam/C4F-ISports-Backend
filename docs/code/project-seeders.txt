using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data.Seeders
{
    public static class AccountSeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            if (!context.Accounts.Any())
            {
                context.Accounts.AddRange(
                    new Account { Email = "admin@gmail.com", Password = BCrypt.Net.BCrypt.HashPassword("Password123!"), Role = "Admin", IsActive = true, CreatedAt = DateTime.UtcNow },
                    new Account { Email = "owner1@gmail.com", Password = BCrypt.Net.BCrypt.HashPassword("Password123!"), Role = "Owner", IsActive = true, CreatedAt = DateTime.UtcNow },
                    new Account { Email = "user1@gmail.com", Password = BCrypt.Net.BCrypt.HashPassword("Password123!"), Role = "User", IsActive = true, CreatedAt = DateTime.UtcNow },
                    new Account { Email = "owner2@gmail.com", Password = BCrypt.Net.BCrypt.HashPassword("Password123!"), Role = "Owner", IsActive = true, CreatedAt = DateTime.UtcNow },
                    new Account { Email = "user2@gmail.com", Password = BCrypt.Net.BCrypt.HashPassword("Password123!"), Role = "User", IsActive = true, CreatedAt = DateTime.UtcNow }
                );
                await context.SaveChangesAsync();
            }
        }
    }
}
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data.Seeders
{
    public static class BookingSeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            if (!context.Bookings.Any())
            {
                var user1 = context.Users.First(u => u.Email == "user1@gmail.com");
                var subField1 = context.SubFields.First(sf => sf.SubFieldName == "Sân 1");

                context.Bookings.AddRange(
                    new Booking
                    {
                        UserId = user1.UserId,
                        SubFieldId = subField1.SubFieldId,
                        BookingDate = DateTime.Parse("2024-03-01"), // Sửa chuỗi ngày hợp lệ
                        StartTime = TimeSpan.Parse("07:00"),
                        EndTime = TimeSpan.Parse("08:00"),
                        TotalPrice = 50000,
                        Status = "Confirmed",
                        PaymentStatus = "Paid",
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow
                    }
                );
                await context.SaveChangesAsync(); // Đổi thành async
            }
        }
    }
}
using api.Data;
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data.Seeders
{
    public static class FieldAmenitySeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            if (!context.FieldAmenities.Any())
            {
                var field = await context.Fields.FirstOrDefaultAsync(f => f.FieldId == 1);
                if (field == null)
                {
                    return;
                }

                var fieldAmenities = new List<FieldAmenity>
                {
                    new FieldAmenity { FieldId = field.FieldId, AmenityName = "Wifi", Description = "Miễn phí tốc độ cao" },
                    new FieldAmenity { FieldId = field.FieldId, AmenityName = "Quầy bar", Description = "Đồ uống đa dạng" }
                };

                await context.FieldAmenities.AddRangeAsync(fieldAmenities);
                await context.SaveChangesAsync();
            }
        }
    }
}
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data.Seeders
{
    public static class FieldDescriptionSeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            if (!context.FieldDescriptions.Any())
            {
                var field1 = context.Fields.FirstOrDefault(f => f.FieldName == "Football Field A");
                var field2 = context.Fields.FirstOrDefault(f => f.FieldName == "Football Field B");
                var field3 = context.Fields.FirstOrDefault(f => f.FieldName == "Badminton Court X");
                var field4 = context.Fields.FirstOrDefault(f => f.FieldName == "Badminton Court Y");

                var descriptions = new List<FieldDescription>();

                if (field1 != null)
                    descriptions.Add(new FieldDescription { FieldId = field1.FieldId, Description = "Sân bóng đẹp, rộng rãi, có khán đài." });
                if (field2 != null)
                    descriptions.Add(new FieldDescription { FieldId = field2.FieldId, Description = "Sân bóng chất lượng cao, gần trung tâm." });
                if (field3 != null)
                    descriptions.Add(new FieldDescription { FieldId = field3.FieldId, Description = "Sân cầu lông thoáng mát, sàn gỗ tốt." });
                if (field4 != null)
                    descriptions.Add(new FieldDescription { FieldId = field4.FieldId, Description = "Sân cầu lông hiện đại, đang bảo trì." });

                if (descriptions.Any())
                {
                    context.FieldDescriptions.AddRange(descriptions);
                    await context.SaveChangesAsync();
                }
            }
        }
    }
}
using api.Data;
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data.Seeders
{
    public static class FieldImageSeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            if (!context.FieldImages.Any())
            {
                var field = await context.Fields.FirstOrDefaultAsync(f => f.FieldId == 1);
                if (field == null)
                {
                    return;
                }

                var fieldImages = new List<FieldImage>
                {
                    new FieldImage { FieldId = field.FieldId, ImageUrl = "https://example.com/image1.jpg" },
                    new FieldImage { FieldId = field.FieldId, ImageUrl = "https://example.com/image2.jpg" }
                };

                await context.FieldImages.AddRangeAsync(fieldImages);
                await context.SaveChangesAsync();
            }
        }
    }
}
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data.Seeders
{
    public static class FieldSeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            if (!context.Fields.Any())
            {
                var owner1 = context.Owners.First(o => o.Email == "owner1@gmail.com");
                var football = context.Sports.FirstOrDefault(s => s.SportName == "Football") ?? new Sport { SportName = "Football" };
                var badminton = context.Sports.FirstOrDefault(s => s.SportName == "Badminton") ?? new Sport { SportName = "Badminton" };

                if (!context.Sports.Any(s => s.SportName == "Football"))
                {
                    context.Sports.Add(football);
                }
                if (!context.Sports.Any(s => s.SportName == "Badminton"))
                {
                    context.Sports.Add(badminton);
                }
                await context.SaveChangesAsync();

                var fields = new List<Field>
                {
                    new Field
                    {
                        SportId = football.SportId,
                        FieldName = "Football Field A",
                        Phone = "0901234567",
                        Address = "123 Đường XYZ, Quận 1",
                        OpenHours = "06:00-21:00",
                        OwnerId = owner1.OwnerId,
                        Status = "Active",
                        Latitude = 10.123456m,
                        Longitude = 106.123456m,
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow
                    },
                    new Field
                    {
                        SportId = football.SportId,
                        FieldName = "Football Field B",
                        Phone = "0901234568",
                        Address = "456 Đường ABC, Quận 2",
                        OpenHours = "06:00-21:00",
                        OwnerId = owner1.OwnerId,
                        Status = "Active",
                        Latitude = 10.124456m,
                        Longitude = 106.124456m,
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow
                    },
                    new Field
                    {
                        SportId = badminton.SportId,
                        FieldName = "Badminton Court X",
                        Phone = "0901234569",
                        Address = "789 Đường DEF, Quận 3",
                        OpenHours = "06:00-21:00",
                        OwnerId = owner1.OwnerId,
                        Status = "Active",
                        Latitude = 10.125456m,
                        Longitude = 106.125456m,
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow
                    },
                    new Field
                    {
                        SportId = badminton.SportId,
                        FieldName = "Badminton Court Y",
                        Phone = "0901234570",
                        Address = "101 Đường GHI, Quận 4",
                        OpenHours = "06:00-21:00",
                        OwnerId = owner1.OwnerId,
                        Status = "Active",
                        Latitude = 10.126456m,
                        Longitude = 106.126456m,
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow
                    }
                };

                context.Fields.AddRange(fields);
                await context.SaveChangesAsync();

                // Thêm các thực thể liên quan
                foreach (var field in fields)
                {
                    context.FieldImages.AddRange(
                        new FieldImage { FieldId = field.FieldId, ImageUrl = "url1" },
                        new FieldImage { FieldId = field.FieldId, ImageUrl = "url2" }
                    );

                    context.FieldAmenities.AddRange(
                        new FieldAmenity { FieldId = field.FieldId, AmenityName = "Wifi", Description = "Miễn phí tốc độ cao" },
                        new FieldAmenity { FieldId = field.FieldId, AmenityName = "Quầy bar", Description = "Đồ uống đa dạng" }
                    );

                    context.SubFields.AddRange(
                        new SubField { FieldId = field.FieldId, SubFieldName = "Sân 1", Size = field.Sport.SportName, PricePerHour = 50000, Status = "Active" },
                        new SubField { FieldId = field.FieldId, SubFieldName = "Sân 2", Size = field.Sport.SportName, PricePerHour = 50000, Status = "Active" }
                    );
                }

                await context.SaveChangesAsync();
            }
        }
    }
}
using api.Data;
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data.Seeders
{
    public static class FieldServiceSeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            if (!context.FieldServices.Any())
            {
                var field = await context.Fields.FirstOrDefaultAsync(f => f.FieldId == 1);
                if (field == null)
                {
                    return;
                }

                var fieldServices = new List<FieldService>
                {
                    new FieldService
                    {
                        FieldId = field.FieldId,
                        ServiceName = "Thuê vợt",
                        Price = 20000,
                        Description = "Vợt chính hãng"
                    },
                    new FieldService
                    {
                        FieldId = field.FieldId,
                        ServiceName = "Thuê giày",
                        Price = 15000,
                        Description = "Giày cầu lông"
                    }
                };

                await context.FieldServices.AddRangeAsync(fieldServices);
                await context.SaveChangesAsync();
            }
        }
    }
}
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data.Seeders
{
    public static class OwnerSeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            if (!context.Owners.Any())
            {
                var owner1Account = context.Accounts.First(a => a.Email == "owner1@gmail.com");
                var owner2Account = context.Accounts.First(a => a.Email == "owner2@gmail.com");

                context.Owners.AddRange(
                    new Owner
                    {
                        AccountId = owner1Account.AccountId,
                        FullName = "Nguyen Van A",
                        Phone = "0901234567",
                        Email = "owner1@gmail.com",
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow
                    },
                    new Owner
                    {
                        AccountId = owner2Account.AccountId,
                        FullName = "Tran Thi B",
                        Phone = "0912345678",
                        Email = "owner2@gmail.com",
                        CreatedAt = DateTime.UtcNow,
                        UpdatedAt = DateTime.UtcNow
                    }
                );
                await context.SaveChangesAsync();
            }
        }
    }
}
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data.Seeders
{
    public static class ReviewSeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            if (!context.Reviews.Any())
            {
                var user1 = context.Users.FirstOrDefault(u => u.Email == "user1@gmail.com");
                var user2 = context.Users.FirstOrDefault(u => u.Email == "user2@gmail.com");
                var field1 = context.Fields.FirstOrDefault(f => f.FieldName == "Football Field A");
                var field3 = context.Fields.FirstOrDefault(f => f.FieldName == "Badminton Court X");

                var reviews = new List<Review>();
                if (user1 != null && field1 != null)
                    reviews.Add(new Review { UserId = user1.UserId, FieldId = field1.FieldId, Rating = 4, Comment = "Sân đẹp, dịch vụ tốt.", CreatedAt = DateTime.UtcNow });
                if (user2 != null && field3 != null)
                    reviews.Add(new Review { UserId = user2.UserId, FieldId = field3.FieldId, Rating = 5, Comment = "Rất hài lòng!", CreatedAt = DateTime.UtcNow });

                if (reviews.Any())
                {
                    context.Reviews.AddRange(reviews);
                    await context.SaveChangesAsync();
                }
            }
        }
    }
}
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data.Seeders
{
    public static class SportSeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            if (!context.Sports.Any())
            {
                context.Sports.AddRange(
                    new Sport { SportName = "Football" },
                    new Sport { SportName = "Badminton" }
                );
                await context.SaveChangesAsync();
            }
        }
    }
}
using api.Models;
using Microsoft.EntityFrameworkCore;

namespace api.Data.Seeders
{
    public static class UserSeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            if (!context.Users.Any())
            {
                var user1Account = context.Accounts.First(a => a.Email == "user1@gmail.com");
                var user2Account = context.Accounts.First(a => a.Email == "user2@gmail.com");

                context.Users.AddRange(
                    new User
                    {
                        AccountId = user1Account.AccountId,
                        FullName = "Le Van C",
                        Email = "user1@gmail.com",
                        Phone = "0923456789",
                        Gender = "Male",
                        DateOfBirth = new DateTime(1990, 1, 1)
                    },
                    new User
                    {
                        AccountId = user2Account.AccountId,
                        FullName = "Pham Thi D",
                        Email = "user2@gmail.com",
                        Phone = "0934567890",
                        Gender = "Female",
                        DateOfBirth = new DateTime(1995, 5, 5)
                    }
                );
                await context.SaveChangesAsync();
            }
        }
    }
}
