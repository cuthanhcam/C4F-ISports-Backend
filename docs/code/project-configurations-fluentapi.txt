using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
       public class AccountConfiguration : IEntityTypeConfiguration<Account>
       {
              public void Configure(EntityTypeBuilder<Account> builder)
              {
                     builder.HasKey(a => a.AccountId);

                     builder.Property(a => a.Email)
                            .IsRequired()
                            .HasMaxLength(255);
                     builder.HasIndex(a => a.Email)
                            .IsUnique();

                     builder.Property(a => a.Password)
                            .IsRequired()
                            .HasMaxLength(255);

                     builder.Property(a => a.Role)
                            .IsRequired()
                            .HasMaxLength(20);

                     builder.Property(a => a.IsActive)
                            .IsRequired();

                     builder.Property(a => a.CreatedAt)
                            .IsRequired();

                     // Cấu hình ResetToken và ResetTokenExpiry
                     builder.Property(a => a.ResetToken)
                            .HasMaxLength(255);

                     builder.Property(a => a.ResetTokenExpiry)
                            .IsRequired(false); // Nullable

                     // Cấu hình VerificationToken và VerificationTokenExpiry
                     builder.Property(a => a.VerificationToken)
                            .HasMaxLength(255);

                     builder.Property(a => a.VerificationTokenExpiry)
                            .IsRequired(false); // Nullable

                     // Quan hệ 1-1 với User
                     builder.HasOne(a => a.User)
                            .WithOne(u => u.Account)
                            .HasForeignKey<User>(u => u.AccountId)
                            .OnDelete(DeleteBehavior.Cascade);

                     // Quan hệ 1-1 với Owner
                     builder.HasOne(a => a.Owner)
                            .WithOne(o => o.Account)
                            .HasForeignKey<Owner>(o => o.AccountId)
                            .OnDelete(DeleteBehavior.Cascade);

                     // Quan hệ 1-nhiều với RefreshToken
                     builder.HasMany(a => a.RefreshTokens)
                            .WithOne(rt => rt.Account)
                            .HasForeignKey(rt => rt.AccountId)
                            .OnDelete(DeleteBehavior.Cascade);
              }
       }
}	
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class BookingConfiguration : IEntityTypeConfiguration<Booking>
    {
        public void Configure(EntityTypeBuilder<Booking> builder)
        {
            builder.HasKey(b => b.BookingId);
            builder.Property(b => b.UserId).IsRequired();
            builder.Property(b => b.SubFieldId).IsRequired();
            builder.Property(b => b.BookingDate).IsRequired();
            builder.Property(b => b.StartTime).IsRequired();
            builder.Property(b => b.EndTime).IsRequired();
            builder.Property(b => b.TotalPrice).HasPrecision(10, 2);
            builder.Property(b => b.Status).IsRequired().HasMaxLength(20);
            builder.Property(b => b.PaymentStatus).IsRequired().HasMaxLength(20);
            builder.Property(b => b.CreatedAt).IsRequired();
            builder.Property(b => b.UpdatedAt).IsRequired();

            builder.HasOne(b => b.User)
                   .WithMany(u => u.Bookings)
                   .HasForeignKey(b => b.UserId)
                   .OnDelete(DeleteBehavior.NoAction);

            builder.HasOne(b => b.SubField)
                   .WithMany(sf => sf.Bookings)
                   .HasForeignKey(b => b.SubFieldId)
                   .OnDelete(DeleteBehavior.NoAction);
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class BookingServiceConfiguration : IEntityTypeConfiguration<BookingService>
    {
        public void Configure(EntityTypeBuilder<BookingService> builder)
        {
            builder.HasKey(bs => bs.BookingServiceId);
            builder.Property(bs => bs.BookingId).IsRequired();
            builder.Property(bs => bs.FieldServiceId).IsRequired(); // Đổi từ ServiceId
            builder.Property(bs => bs.Quantity).IsRequired();
            builder.Property(bs => bs.Price).HasPrecision(10, 2);

            builder.HasOne(bs => bs.Booking)
                   .WithMany()
                   .HasForeignKey(bs => bs.BookingId)
                   .OnDelete(DeleteBehavior.NoAction);

            builder.HasOne(bs => bs.FieldService) // Đổi từ Service
                   .WithMany(fs => fs.BookingServices)
                   .HasForeignKey(bs => bs.FieldServiceId)
                   .OnDelete(DeleteBehavior.NoAction);
        }
    }
}
using api.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace api.Data.Configurations
{
    public class FavoriteFieldConfiguration : IEntityTypeConfiguration<FavoriteField>
    {
        public void Configure(EntityTypeBuilder<FavoriteField> builder)
        {
            builder.HasKey(ff => ff.FavoriteId);

            builder.HasOne(ff => ff.User)
                   .WithMany(u => u.FavoriteFields)
                   .HasForeignKey(ff => ff.UserId)
                   .OnDelete(DeleteBehavior.Cascade);

            builder.HasOne(ff => ff.Field)
                   .WithMany()
                   .HasForeignKey(ff => ff.FieldId)
                   .OnDelete(DeleteBehavior.NoAction);

            builder.HasIndex(ff => new { ff.UserId, ff.FieldId }).IsUnique();
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class FieldAmenityConfiguration : IEntityTypeConfiguration<FieldAmenity>
    {
        public void Configure(EntityTypeBuilder<FieldAmenity> builder)
        {
            builder.HasKey(fa => fa.FieldAmenityId);
            builder.Property(fa => fa.FieldId).IsRequired();
            builder.Property(fa => fa.AmenityName).IsRequired().HasMaxLength(100);
            builder.Property(fa => fa.Description).HasMaxLength(200);

            builder.HasOne(fa => fa.Field)
                   .WithMany(f => f.FieldAmenities)
                   .HasForeignKey(fa => fa.FieldId)
                   .OnDelete(DeleteBehavior.Cascade);
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class FieldConfiguration : IEntityTypeConfiguration<Field>
    {
        public void Configure(EntityTypeBuilder<Field> builder)
        {
            builder.HasKey(f => f.FieldId);
            builder.Property(f => f.SportId).IsRequired();
            builder.Property(f => f.FieldName).IsRequired().HasMaxLength(100);
            builder.Property(f => f.Phone).HasMaxLength(20);
            builder.Property(f => f.Address).HasMaxLength(255);
            builder.Property(f => f.OpenHours).HasMaxLength(100);
            builder.Property(f => f.OwnerId).IsRequired();
            builder.Property(f => f.Status).IsRequired().HasMaxLength(20);
            builder.Property(f => f.Latitude).HasPrecision(9, 6);
            builder.Property(f => f.Longitude).HasPrecision(9, 6);
            builder.Property(f => f.CreatedAt).IsRequired();
            builder.Property(f => f.UpdatedAt).IsRequired();

            builder.HasIndex(f => f.FieldId);
            builder.HasOne(f => f.Sport)
                .WithMany(s => s.Fields)
                .HasForeignKey(f => f.SportId);
            builder.HasOne(f => f.Owner)
                .WithMany(o => o.Fields)
                .HasForeignKey(f => f.OwnerId);
            builder.HasMany(f => f.SubFields)
                .WithOne(sf => sf.Field)
                .HasForeignKey(sf => sf.FieldId);
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class FieldDescriptionConfiguration : IEntityTypeConfiguration<FieldDescription>
    {
        public void Configure(EntityTypeBuilder<FieldDescription> builder)
        {
            builder.HasKey(fd => fd.FieldDescriptionId);
            builder.Property(fd => fd.FieldId).IsRequired();
            builder.Property(fd => fd.Description).IsRequired();

            builder.HasOne(fd => fd.Field)
                   .WithMany()
                   .HasForeignKey(fd => fd.FieldId);
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class FieldImageConfiguration : IEntityTypeConfiguration<FieldImage>
    {
        public void Configure(EntityTypeBuilder<FieldImage> builder)
        {
            builder.HasKey(fi => fi.FieldImageId);
            builder.Property(fi => fi.FieldId).IsRequired();
            builder.Property(fi => fi.Thumbnail).HasMaxLength(255);
            builder.Property(fi => fi.ImageUrl).IsRequired();

            builder.HasOne(fi => fi.Field)
                   .WithMany()
                   .HasForeignKey(fi => fi.FieldId);
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class FieldServiceConfiguration : IEntityTypeConfiguration<FieldService>
    {
        public void Configure(EntityTypeBuilder<FieldService> builder)
        {
            builder.HasKey(fs => fs.FieldServiceId);
            builder.Property(fs => fs.FieldId).IsRequired();
            builder.Property(fs => fs.ServiceName).IsRequired().HasMaxLength(100);
            builder.Property(fs => fs.Price).HasPrecision(10, 2);
            builder.Property(fs => fs.Description).HasMaxLength(200);

            builder.HasOne(fs => fs.Field)
                   .WithMany(f => f.FieldServices)
                   .HasForeignKey(fs => fs.FieldId)
                   .OnDelete(DeleteBehavior.Cascade);
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class NotificationConfiguration : IEntityTypeConfiguration<Notification>
    {
        public void Configure(EntityTypeBuilder<Notification> builder)
        {
            builder.HasKey(n => n.NotificationId);
            builder.Property(n => n.UserId).IsRequired();
            builder.Property(n => n.Title).IsRequired().HasMaxLength(100);
            builder.Property(n => n.Content).IsRequired();
            builder.Property(n => n.IsRead).IsRequired();
            builder.Property(n => n.CreatedAt).IsRequired();

            builder.HasOne(n => n.User)
                   .WithMany(u => u.Notifications)
                   .HasForeignKey(n => n.UserId);
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class OwnerConfiguration : IEntityTypeConfiguration<Owner>
    {
        public void Configure(EntityTypeBuilder<Owner> builder)
        {
            builder.HasKey(o => o.OwnerId);
            builder.Property(o => o.AccountId).IsRequired();
            builder.Property(o => o.FullName).IsRequired().HasMaxLength(100);
            builder.Property(o => o.Phone).HasMaxLength(20);
            builder.Property(o => o.Email).IsRequired().HasMaxLength(255);
            builder.HasIndex(o => o.Email).IsUnique();
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class PaymentConfiguration : IEntityTypeConfiguration<Payment>
    {
        public void Configure(EntityTypeBuilder<Payment> builder)
        {
            builder.HasKey(p => p.PaymentId);
            builder.Property(p => p.BookingId).IsRequired();
            builder.Property(p => p.Amount).HasPrecision(10, 2);
            builder.Property(p => p.PaymentMethod).IsRequired().HasMaxLength(50);
            builder.Property(p => p.TransactionId).IsRequired().HasMaxLength(100);
            builder.Property(p => p.Status).IsRequired().HasMaxLength(20);
            builder.Property(p => p.CreatedAt).IsRequired();

            builder.HasOne(p => p.Booking)
                   .WithMany()
                   .HasForeignKey(p => p.BookingId);
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class PromotionConfiguration : IEntityTypeConfiguration<Promotion>
    {
        public void Configure(EntityTypeBuilder<Promotion> builder)
        {
            builder.HasKey(p => p.PromotionId);
            builder.Property(p => p.Code).IsRequired().HasMaxLength(50);
            builder.HasIndex(p => p.Code).IsUnique();
            builder.Property(p => p.Description).HasMaxLength(255);
            builder.Property(p => p.DiscountType).IsRequired().HasMaxLength(20);
            builder.Property(p => p.DiscountValue).HasPrecision(10, 2);
            builder.Property(p => p.StartDate).IsRequired();
            builder.Property(p => p.EndDate).IsRequired();
            builder.Property(p => p.MinBookingValue).HasPrecision(10, 2);
            builder.Property(p => p.MaxDiscountAmount).HasPrecision(10, 2);
            builder.Property(p => p.IsActive).IsRequired();
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class RefreshTokenConfiguration : IEntityTypeConfiguration<RefreshToken>
    {
        public void Configure(EntityTypeBuilder<RefreshToken> builder)
        {
            builder.HasKey(rt => rt.RefreshTokenId);
            builder.Property(rt => rt.AccountId).IsRequired();
            builder.Property(rt => rt.Token).IsRequired().HasMaxLength(255);
            builder.Property(rt => rt.Expires).IsRequired();
            builder.Property(rt => rt.Created).IsRequired();

            builder.HasOne(rt => rt.Account)
                   .WithMany()
                   .HasForeignKey(rt => rt.AccountId);
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class ReviewConfiguration : IEntityTypeConfiguration<Review>
    {
        public void Configure(EntityTypeBuilder<Review> builder)
        {
            builder.HasKey(r => r.ReviewId);
            builder.Property(r => r.UserId).IsRequired();
            builder.Property(r => r.FieldId).IsRequired();
            builder.Property(r => r.Rating).IsRequired();
            builder.Property(r => r.Comment).IsRequired();
            builder.Property(r => r.CreatedAt).IsRequired();

            // Quan hệ với User và Field, sử dụng NoAction để tránh multiple cascade paths
            builder.HasOne(r => r.User)
                   .WithMany(u => u.Reviews)
                   .HasForeignKey(r => r.UserId)
                   .OnDelete(DeleteBehavior.NoAction); // Thay Cascade thành NoAction

            builder.HasOne(r => r.Field)
                   .WithMany(f => f.Reviews)
                   .HasForeignKey(r => r.FieldId)
                   .OnDelete(DeleteBehavior.NoAction); // Thay Cascade thành NoAction
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class SportConfiguration : IEntityTypeConfiguration<Sport>
    {
        public void Configure(EntityTypeBuilder<Sport> builder)
        {
            builder.HasKey(s => s.SportId);
            builder.Property(s => s.SportName).IsRequired().HasMaxLength(50);
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class SubFieldConfiguration : IEntityTypeConfiguration<SubField>
    {
        public void Configure(EntityTypeBuilder<SubField> builder)
        {
            builder.Property(sf => sf.SubFieldName)
                   .IsRequired()
                   .HasMaxLength(50);

            builder.Property(sf => sf.Size)
                   .IsRequired()
                   .HasMaxLength(20);

            builder.Property(sf => sf.PricePerHour)
                   .IsRequired();

            builder.Property(sf => sf.Status)
                   .IsRequired()
                   .HasMaxLength(20);
        }
    }
}
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using api.Models;

namespace api.Data.Configurations
{
    public class UserConfiguration : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder.HasKey(u => u.UserId);
            builder.Property(u => u.AccountId).IsRequired();
            builder.Property(u => u.FullName).IsRequired().HasMaxLength(100);
            builder.Property(u => u.Email).IsRequired().HasMaxLength(255);
            builder.HasIndex(u => u.Email).IsUnique();
            builder.Property(u => u.Phone).HasMaxLength(20);
            builder.Property(u => u.Gender).HasMaxLength(10);
            builder.Property(u => u.DateOfBirth);
        }
    }
}