using System.ComponentModel.DataAnnotations;

namespace api.Dtos.Field
{
    public class FieldAmenityDto
    {
        public string AmenityName { get; set; }
        public string Description { get; set; }
    }

    public class CreateFieldAmenityDto
    {
        [Required(ErrorMessage = "Tên tiện ích không được để trống")]
        [StringLength(100, ErrorMessage = "Tên tiện ích không được vượt quá 100 ký tự")]
        public string Name { get; set; }

        [StringLength(200, ErrorMessage = "Mô tả không được vượt quá 200 ký tự")]
        public string Description { get; set; }
    }

    public class UpdateFieldAmenityDto
    {
        [Required(ErrorMessage = "Tên tiện ích không được để trống")]
        [StringLength(100, ErrorMessage = "Tên tiện ích không được vượt quá 100 ký tự")]
        public string Name { get; set; }

        [StringLength(200, ErrorMessage = "Mô tả không được vượt quá 200 ký tự")]
        public string Description { get; set; }
    }
}
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace api.Dtos.Field
{
    public class FieldDto
    {
        public int FieldId { get; set; }
        public string FieldName { get; set; }
        public int SportId { get; set; }
        public string SportName { get; set; }
        public string Address { get; set; }
        public string Phone { get; set; }
        public string OpenHours { get; set; }
        public decimal Latitude { get; set; }
        public decimal Longitude { get; set; }
        public string Status { get; set; }
        public List<string> Images { get; set; }
        public List<FieldAmenityDto> Amenities { get; set; }
        public List<FieldServiceDto> Services { get; set; }
        public List<SubFieldDto> SubFields { get; set; }
    }

    public class FieldAvailabilityDto
    {
        public int FieldId { get; set; }
        public string FieldName { get; set; }
        public string Date { get; set; }
        public string OpenHours { get; set; }
        public List<FieldServiceAvailabilityDto> Services { get; set; }
        public List<SubFieldAvailabilityDto> SubFields { get; set; }
    }

    public class FieldServiceAvailabilityDto
    {
        public string Name { get; set; }
        public decimal Price { get; set; }
    }

    public class SubFieldAvailabilityDto
    {
        public int SubFieldId { get; set; }
        public string Name { get; set; }
        public decimal PricePerHour { get; set; }
        public List<TimeSlotDto> Slots { get; set; }
    }

    public class CreateFieldDto
    {
        [Required(ErrorMessage = "Tên sân không được để trống")]
        [StringLength(100, ErrorMessage = "Tên sân không được vượt quá 100 ký tự")]
        public string FieldName { get; set; }

        [Required(ErrorMessage = "Địa chỉ không được để trống")]
        [StringLength(255, ErrorMessage = "Địa chỉ không được vượt quá 255 ký tự")]
        public string Address { get; set; }

        [Required(ErrorMessage = "Số điện thoại không được để trống")]
        [Phone(ErrorMessage = "Số điện thoại không hợp lệ")]
        [StringLength(10, ErrorMessage = "Số điện thoại không được vượt quá 10 ký tự")]
        public string Phone { get; set; }

        [Required(ErrorMessage = "Giờ mở cửa không được để trống")]
        [StringLength(100, ErrorMessage = "Giờ mở cửa không được vượt quá 100 ký tự")]
        public string OpenHours { get; set; }

        [StringLength(500, ErrorMessage = "Mô tả không được vượt quá 500 ký tự")]
        public string Description { get; set; }

        [Required(ErrorMessage = "Loại thể thao không được để trống")]
        public int SportId { get; set; }

        // [Required(ErrorMessage = "Vĩ độ không được để trống")]
        // [Range(-90, 90, ErrorMessage = "Vĩ độ không hợp lệ")]
        // public decimal Latitude { get; set; }

        // [Required(ErrorMessage = "Kinh độ không được để trống")]
        // [Range(-180, 180, ErrorMessage = "Kinh độ không hợp lệ")]
        // public decimal Longitude { get; set; }

        [Required(ErrorMessage = "Trạng thái không được để trống")]
        [RegularExpression("^(Active|Inactive|Maintenance)$", ErrorMessage = "Trạng thái không hợp lệ")]
        public string Status { get; set; }

        public List<CreateFieldAmenityDto> Amenities { get; set; } // Đổi từ List<string> thành List<CreateFieldAmenityDto>
        public List<CreateFieldServiceDto> Services { get; set; }
        public List<CreateSubFieldDto> SubFields { get; set; }
    }

    public class UpdateFieldDto
    {
        [Required(ErrorMessage = "Tên sân không được để trống")]
        [StringLength(100, ErrorMessage = "Tên sân không được vượt quá 100 ký tự")]
        public string FieldName { get; set; }

        [Required(ErrorMessage = "Địa chỉ không được để trống")]
        [StringLength(255, ErrorMessage = "Địa chỉ không được vượt quá 255 ký tự")]
        public string Address { get; set; }

        [Required(ErrorMessage = "Số điện thoại không được để trống")]
        [Phone(ErrorMessage = "Số điện thoại không hợp lệ")]
        [StringLength(10, ErrorMessage = "Số điện thoại không được vượt quá 10 ký tự")]
        public string Phone { get; set; }

        [Required(ErrorMessage = "Giờ mở cửa không được để trống")]
        [StringLength(100, ErrorMessage = "Giờ mở cửa không được vượt quá 100 ký tự")]
        public string OpenHours { get; set; }

        [StringLength(500, ErrorMessage = "Mô tả không được vượt quá 500 ký tự")]
        public string Description { get; set; }

        [Required(ErrorMessage = "Trạng thái không được để trống")]
        [RegularExpression("^(Active|Inactive|Maintenance)$", ErrorMessage = "Trạng thái không hợp lệ")]
        public string Status { get; set; }

        // [Required(ErrorMessage = "Vĩ độ không được để trống")]
        // [Range(-90, 90, ErrorMessage = "Vĩ độ không hợp lệ")]
        // public decimal Latitude { get; set; }

        // [Required(ErrorMessage = "Kinh độ không được để trống")]
        // [Range(-180, 180, ErrorMessage = "Kinh độ không hợp lệ")]
        // public decimal Longitude { get; set; }

        public List<UpdateFieldAmenityDto> Amenities { get; set; } // Đổi từ List<string> thành List<UpdateFieldAmenityDto>
        public List<UpdateFieldServiceDto> Services { get; set; }
        public List<UpdateSubFieldDto> SubFields { get; set; }
    }

    public class FieldFilterDto
    {
        public int? SportId { get; set; }
        public string? Location { get; set; }
        public string? Status { get; set; }
        public decimal? MinPrice { get; set; }
        public decimal? MaxPrice { get; set; }
        public string? Sort { get; set; }
        public int Page { get; set; } = 1;
        public int PageSize { get; set; } = 10;
    }

    public class FieldSearchDto
    {
        public string SearchTerm { get; set; }
        public string Location { get; set; }
        public int? SportId { get; set; }
        public DateTime? Time { get; set; }
        public decimal? Latitude { get; set; }
        public decimal? Longitude { get; set; }
        public decimal? Radius { get; set; }
        public decimal? MinPrice { get; set; }
        public decimal? MaxPrice { get; set; }
        public string Sort { get; set; }
        public int Page { get; set; } = 1;
        public int PageSize { get; set; } = 10;
    }

    public class FieldReportDto
    {
        [Required(ErrorMessage = "Lý do báo cáo không được để trống")]
        [StringLength(50, ErrorMessage = "Lý do báo cáo không được vượt quá 50 ký tự")]
        public string Reason { get; set; }

        [Required(ErrorMessage = "Mô tả không được để trống")]
        [StringLength(500, ErrorMessage = "Mô tả không được vượt quá 500 ký tự")]
        public string Description { get; set; }
    }
}
using System.ComponentModel.DataAnnotations;

namespace api.Dtos.Field
{
    public class FieldReviewDto
    {
        public int ReviewId { get; set; }

        [Required(ErrorMessage = "Tên người dùng không được để trống")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Đánh giá không được để trống")]
        [Range(1, 5, ErrorMessage = "Đánh giá phải từ 1 đến 5 sao")]
        public int Rating { get; set; }

        [Required(ErrorMessage = "Nội dung đánh giá không được để trống")]
        [StringLength(500, ErrorMessage = "Nội dung đánh giá không được vượt quá 500 ký tự")]
        public string Comment { get; set; }

        public DateTime CreatedAt { get; set; }
    }

    public class CreateFieldReviewDto
    {
        [Required(ErrorMessage = "Đánh giá không được để trống")]
        [Range(1, 5, ErrorMessage = "Đánh giá phải từ 1 đến 5 sao")]
        public int Rating { get; set; }

        [Required(ErrorMessage = "Nội dung đánh giá không được để trống")]
        [StringLength(500, ErrorMessage = "Nội dung đánh giá không được vượt quá 500 ký tự")]
        public string Comment { get; set; }
    }
}
using System.ComponentModel.DataAnnotations;

namespace api.Dtos.Field
{
    public class FieldServiceDto
    {
        public string Name { get; set; }
        public decimal Price { get; set; }
        public string Description { get; set; }
    }

    public class CreateFieldServiceDto
    {
        [Required(ErrorMessage = "Tên dịch vụ không được để trống")]
        [StringLength(100, ErrorMessage = "Tên dịch vụ không được vượt quá 100 ký tự")]
        public string ServiceName { get; set; }

        [Required(ErrorMessage = "Giá không được để trống")]
        [Range(0, 10000000, ErrorMessage = "Giá không hợp lệ")]
        public decimal Price { get; set; }

        [StringLength(200, ErrorMessage = "Mô tả không được vượt quá 200 ký tự")]
        public string Description { get; set; }
    }

    public class UpdateFieldServiceDto
    {
        [Required(ErrorMessage = "Tên dịch vụ không được để trống")]
        [StringLength(100, ErrorMessage = "Tên dịch vụ không được vượt quá 100 ký tự")]
        public string ServiceName { get; set; } // Đổi Name thành ServiceName để đồng bộ với CreateFieldServiceDto

        [Required(ErrorMessage = "Giá không được để trống")]
        [Range(0, 10000000, ErrorMessage = "Giá không hợp lệ")]
        public decimal Price { get; set; }

        [StringLength(200, ErrorMessage = "Mô tả không được vượt quá 200 ký tự")]
        public string Description { get; set; }
    }
}
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace api.Dtos.Field
{
    public class SubFieldDto
    {
        public int SubFieldId { get; set; }
        public string Name { get; set; }
        public string Size { get; set; } // Giữ Size để đồng bộ với model
        public decimal PricePerHour { get; set; }
        public string Status { get; set; }
    }

    public class CreateSubFieldDto
    {
        [Required(ErrorMessage = "Tên sân nhỏ không được để trống")]
        [StringLength(50, ErrorMessage = "Tên sân nhỏ không vượt quá 50 ký tự")]
        public string SubFieldName { get; set; }

        [Required(ErrorMessage = "Kích thước không được để trống")]
        [StringLength(20, ErrorMessage = "Kích thước không vượt quá 20 ký tự")]
        public string Size { get; set; }

        [Required(ErrorMessage = "Giá mỗi giờ không được để trống")]
        [Range(0, 10000000, ErrorMessage = "Giá không hợp lệ")]
        public decimal PricePerHour { get; set; }
    }

    public class UpdateSubFieldDto
    {
        [Required(ErrorMessage = "Tên sân nhỏ không được để trống")]
        [StringLength(50, ErrorMessage = "Tên sân nhỏ không vượt quá 50 ký tự")]
        public string SubFieldName { get; set; }

        [Required(ErrorMessage = "Kích thước không được để trống")]
        [StringLength(20, ErrorMessage = "Kích thước không vượt quá 20 ký tự")]
        public string Size { get; set; }

        [Required(ErrorMessage = "Giá mỗi giờ không được để trống")]
        [Range(0, 10000000, ErrorMessage = "Giá không hợp lệ")]
        public decimal PricePerHour { get; set; }

        [Required(ErrorMessage = "Trạng thái không được để trống")]
        [RegularExpression("^(Active|Inactive|Maintenance)$", ErrorMessage = "Trạng thái không hợp lệ")]
        public string Status { get; set; }
    }
}
using System.ComponentModel.DataAnnotations;

namespace api.Dtos.Field
{
    public class TimeSlotDto
    {
        [Required(ErrorMessage = "Thời gian bắt đầu không được để trống")]
        [RegularExpression(@"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$", ErrorMessage = "Thời gian bắt đầu phải có định dạng hh:mm")]
        public string StartTime { get; set; }

        [Required(ErrorMessage = "Thời gian kết thúc không được để trống")]
        [RegularExpression(@"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$", ErrorMessage = "Thời gian kết thúc phải có định dạng hh:mm")]
        public string EndTime { get; set; }

        [Required(ErrorMessage = "Trạng thái không được để trống")]
        [RegularExpression("^(Available|Booked)$", ErrorMessage = "Trạng thái phải là 'Available' hoặc 'Booked'")]
        public string Status { get; set; }
    }
}