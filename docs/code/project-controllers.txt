using api.Dtos.Auth;
using api.Interfaces;
using Hangfire.Annotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity.Data;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.RateLimiting;

namespace api.Controllers
{
    [Route("api/auth")]
    [ApiController]
    [EnableRateLimiting("auth")]
    public class AuthController : ControllerBase
    {
        private readonly IConfiguration _configuration;
        private readonly IAuthService _authService;

        public AuthController(IAuthService authService, IConfiguration configuration)
        {
            _configuration = configuration;
            _authService = authService;
        }

        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterDto registerDto)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                var (token, refreshToken) = await _authService.RegisterAsync(registerDto);
                return Ok(new { Token = token, RefreshToken = refreshToken });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginDto loginDto)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                var (token, refreshToken) = await _authService.LoginAsync(loginDto);
                return Ok(new { Token = token, RefreshToken = refreshToken });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpPost("refresh-token")]
        public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenDto refreshTokenDto)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                var (token, newRefreshToken) = await _authService.RefreshTokenAsync(refreshTokenDto.RefreshToken);
                return Ok(new { Token = token, RefreshToken = newRefreshToken });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpPost("forgot-password")]
        public async Task<IActionResult> ForgotPassword([FromBody] ForgotPasswordRequest model)
        {
            try
            {
                if (string.IsNullOrEmpty(model.Email) || !model.Email.Contains("@"))
                {
                    return BadRequest(new { Error = "Email không hợp lệ" });
                }

                await _authService.ForgotPasswordAsync(model.Email);
                return Ok(new { Message = "Link đặt lại mật khẩu đã được gửi đến email của bạn." });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpPost("reset-password")]
        public async Task<IActionResult> ResetPassword([FromBody] ResetPasswordDto resetPasswordDto)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                await _authService.ResetPasswordAsync(resetPasswordDto);
                return Ok(new { message = "Mật khẩu đã được đặt lại thành công." });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpPost("logout")]
        public async Task<IActionResult> Logout([FromBody] RefreshTokenDto refreshTokenDto)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                await _authService.LogoutAsync(refreshTokenDto.RefreshToken);
                return Ok("Đăng xuất thành công.");
            }
            catch (Exception ex)
            {
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpGet("verify-token")]
        public async Task<IActionResult> VerifyToken([FromQuery] string token)
        {
            try
            {
                if (string.IsNullOrEmpty(token))
                {
                    return BadRequest(new { Error = "Token không hợp lệ" });
                }

                var isValid = await _authService.VerifyTokenAsync(token);
                return Ok(new { IsValid = isValid });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Error = ex.Message });
            }
        }

        // [HttpGet("verify-email")]
        // public async Task<IActionResult> VerifyEmail([FromQuery] string email, [FromQuery] string token)
        // {
        //     try
        //     {
        //         if (string.IsNullOrEmpty(email) || !email.Contains("@") || string.IsNullOrEmpty(token))
        //         {
        //             return BadRequest(new { Error = "Email hoặc token không hợp lệ" });
        //         }

        //         var result = await _authService.VerifyEmailAsync(email, token);
        //         return Ok(new { Success = true, Message = "Email đã được xác thực" });
        //     }
        //     catch (Exception ex)
        //     {
        //         return BadRequest(new { Error = ex.Message });
        //     }
        // }

        [HttpGet("verify-email")]
        public async Task<IActionResult> VerifyEmail([FromQuery] string email, [FromQuery] string token)
        {
            try
            {
                if (string.IsNullOrEmpty(email) || !email.Contains("@") || string.IsNullOrEmpty(token))
                {
                    string errorMessage = Uri.EscapeDataString("Email hoặc token không hợp lệ");
                    return Redirect($"{_configuration["FEUrl"]}/auth/verify-email?status=error&message={errorMessage}");
                }

                var result = await _authService.VerifyEmailAsync(email, token);

                if (!result)
                {
                    string failMessage = Uri.EscapeDataString("Xác thực email thất bại");
                    return Redirect($"{_configuration["FEUrl"]}/auth/verify-email?status=error&message={failMessage}");
                }

                string successMessage = Uri.EscapeDataString("Email đã được xác thực thành công");
                return Redirect($"{_configuration["FEUrl"]}/auth/verify-email?status=success&message={successMessage}");
            }
            catch (Exception ex)
            {
                string exceptionMessage = Uri.EscapeDataString($"Lỗi: {ex.Message}");
                return Redirect($"{_configuration["FEUrl"]}/auth/verify-email?status=error&message={exceptionMessage}");
            }
        }

        [HttpPost("resend-verification")]
        public async Task<IActionResult> ResendVerificationEmail([FromBody] string email)
        {
            try
            {
                if (string.IsNullOrEmpty(email) || !email.Contains("@"))
                {
                    return BadRequest(new { Error = "Email không hợp lệ" });
                }

                await _authService.ResendVerificationEmailAsync(email);
                return Ok(new { Message = "Email xác thực đã được gửi lại. Vui lòng kiểm tra hộp thư của bạn." });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpGet("me")]
        [Authorize]
        public async Task<IActionResult> GetCurrentUser()
        {
            try
            {
                var user = await _authService.GetCurrentUserAsync(User);
                return Ok(new
                {
                    Email = user.Email,
                    Role = user.Role,
                    FullName = user.User?.FullName ?? user.Owner?.FullName,
                    Phone = user.User?.Phone ?? user.Owner?.Phone
                });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpPost("change-password")]
        [Authorize]
        public async Task<IActionResult> ChangePassword([FromBody] ChangePasswordDto changePasswordDto)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest(ModelState);
                }

                await _authService.ChangePasswordAsync(User, changePasswordDto);
                return Ok("Mật khẩu đã được thay đổi thành công.");
            }
            catch (Exception ex)
            {
                return BadRequest(new { Error = ex.Message });
            }
        }
    }
}
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using api.Interfaces;
using api.Dtos.Field;
using api.Dtos;
using System.Security.Claims;
using Microsoft.AspNetCore.RateLimiting;

namespace api.Controllers
{
    [Route("api/field")]
    [ApiController]
    [EnableRateLimiting("auth")]
    public class FieldController : ControllerBase
    {
        private readonly IFieldService _fieldService;

        public FieldController(IFieldService fieldService)
        {
            _fieldService = fieldService;
        }

        [HttpGet]
        public async Task<ActionResult<PaginatedResponse<FieldDto>>> GetFields([FromQuery] FieldFilterDto filter)
        {
            var fields = await _fieldService.GetFieldsAsync(filter);
            return Ok(fields);
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<FieldDto>> GetFieldById(int id)
        {
            var field = await _fieldService.GetFieldByIdAsync(id);
            if (field == null)
                return NotFound("Không tìm thấy sân");
            return Ok(field);
        }

        [HttpGet("{id}/availability")]
        public async Task<ActionResult<FieldAvailabilityDto>> GetFieldAvailability(int id, [FromQuery] DateTime date)
        {
            var availability = await _fieldService.GetFieldAvailabilityAsync(id, date);
            if (availability == null)
                return NotFound("Không tìm thấy sân");
            return Ok(availability);
        }

        [Authorize(Roles = "Owner")]
        [HttpPost]
        public async Task<ActionResult<FieldDto>> CreateField([FromBody] CreateFieldDto createFieldDto)
        {
            var field = await _fieldService.CreateFieldAsync(User, createFieldDto);
            return CreatedAtAction(nameof(GetFieldById), new { id = field.FieldId }, field);
        }

        [Authorize(Roles = "Owner")]
        [HttpPut("{id}")]
        public async Task<ActionResult<FieldDto>> UpdateField(int id, [FromBody] UpdateFieldDto updateFieldDto)
        {
            var field = await _fieldService.UpdateFieldAsync(User, id, updateFieldDto);
            if (field == null)
                return NotFound("Không tìm thấy sân");
            return Ok(field);
        }

        [Authorize(Roles = "Owner")]
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteField(int id)
        {
            await _fieldService.DeleteFieldAsync(User, id);
            return NoContent();
        }

        [Authorize(Roles = "Owner")]
        [HttpPost("{id}/images")]
        public async Task<ActionResult<string>> UploadFieldImage(int id, [FromBody] string imageBase64)
        {
            var imageUrl = await _fieldService.UploadFieldImageAsync(User, id, imageBase64);
            return Ok(new { imageUrl });
        }

        [Authorize(Roles = "Owner")]
        [HttpGet("owner")]
        public async Task<ActionResult<PaginatedResponse<FieldDto>>> GetOwnerFields(
            [FromQuery] string status,
            [FromQuery] string sort,
            [FromQuery] int page = 1,
            [FromQuery] int pageSize = 10)
        {
            var fields = await _fieldService.GetOwnerFieldsAsync(User, status, sort, page, pageSize);
            return Ok(fields);
        }

        [HttpGet("search")]
        public async Task<ActionResult<PaginatedResponse<FieldDto>>> SearchFields([FromQuery] FieldSearchDto search)
        {
            var fields = await _fieldService.SearchFieldsAsync(search);
            return Ok(fields);
        }

        [HttpGet("{id}/reviews")]
        public async Task<ActionResult<PaginatedResponse<FieldReviewDto>>> GetFieldReviews(
            int id, [FromQuery] int? rating, [FromQuery] string sort, [FromQuery] int page = 1, [FromQuery] int pageSize = 10)
        {
            var reviews = await _fieldService.GetFieldReviewsAsync(id, rating, sort, page, pageSize);
            return Ok(reviews);
        }

        [HttpGet("nearby")]
        public async Task<ActionResult<PaginatedResponse<FieldDto>>> GetNearbyFields(
            [FromQuery] decimal latitude, [FromQuery] decimal longitude, [FromQuery] decimal radius,
            [FromQuery] string sort, [FromQuery] int page = 1, [FromQuery] int pageSize = 10)
        {
            var fields = await _fieldService.GetNearbyFieldsAsync(latitude, longitude, radius, sort, page, pageSize);
            return Ok(fields);
        }

        [Authorize(Roles = "User")]
        [HttpPost("{fieldId}/report")]
        public async Task<ActionResult> ReportField(int fieldId, [FromBody] FieldReportDto reportDto)
        {
            await _fieldService.ReportFieldAsync(fieldId, reportDto);
            return NoContent();
        }

        [HttpGet("suggested")]
        public async Task<ActionResult<PaginatedResponse<FieldDto>>> GetSuggestedFields(
            [FromQuery] decimal? latitude,
            [FromQuery] decimal? longitude,
            [FromQuery] int page = 1,
            [FromQuery] int pageSize = 10)
        {
            var fields = await _fieldService.GetSuggestedFieldsAsync(latitude, longitude, page, pageSize);
            return Ok(fields);
        }
    }
}
using System;
using System.Threading.Tasks;
using api.Dtos.User;
using api.Interfaces;
using api.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;
using Microsoft.Extensions.Logging;
using System.Linq;
using api.Dtos;
using CloudinaryDotNet;
using api.Services;
using Microsoft.AspNetCore.RateLimiting;

namespace api.Controllers
{
    [Route("api/users")]
    [ApiController]
    [EnableRateLimiting("auth")]
    [Authorize]
    public class UserController : ControllerBase
    {
        private readonly IUserService _userService;
        private readonly CloudinaryService _cloudinaryService;
        private readonly ILogger<UserController> _logger;

        public UserController(IUserService userService, CloudinaryService cloudinaryService, ILogger<UserController> logger)
        {
            _userService = userService;
            _cloudinaryService = cloudinaryService;
            _logger = logger;
        }

        [HttpGet("profile")]
        [ProducesResponseType(typeof(UserProfileResponseDto), 200)]
        [ProducesResponseType(400)]
        public async Task<IActionResult> GetProfile()
        {
            try
            {
                _logger.LogInformation("Getting user profile for user: {UserId}", User.FindFirstValue(ClaimTypes.NameIdentifier));
                var profile = await _userService.GetUserProfileAsync(User);
                return Ok(profile); // Trả về UserProfileResponseDto trực tiếp
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting user profile for user: {UserId}", User.FindFirstValue(ClaimTypes.NameIdentifier));
                return BadRequest(new { Error = ex.Message }); // Trả về thông báo lỗi chi tiết hơn
            }
        }

        [HttpPut("profile")]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        public async Task<IActionResult> UpdateProfile([FromBody] UpdateProfileDto updateProfileDto)
        {
            try
            {
                if (updateProfileDto == null)
                {
                    return BadRequest(new { Error = "Dữ liệu cập nhật không hợp lệ" });
                }

                _logger.LogInformation("Updating user profile for user: {UserId}", User.FindFirstValue(ClaimTypes.NameIdentifier));
                await _userService.UpdateUserProfileAsync(User, updateProfileDto);
                return Ok(new { Success = true, Message = "Cập nhật thông tin thành công" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error updating user profile for user: {UserId}", User.FindFirstValue(ClaimTypes.NameIdentifier));
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpGet("bookings")]
        [ProducesResponseType(typeof(PaginatedResponse<BookingResponseDto>), 200)]
        [ProducesResponseType(400)]
        public async Task<IActionResult> GetBookings(
            [FromQuery] string status = null,
            [FromQuery] DateTime? date = null,
            [FromQuery] string sort = "BookingDate:desc",
            [FromQuery] int page = 1,
            [FromQuery] int pageSize = 10)
        {
            try
            {
                if (page < 1 || pageSize < 1)
                {
                    return BadRequest(new { Error = "Số trang và kích thước trang phải lớn hơn 0" });
                }

                _logger.LogInformation("Getting bookings for user: {UserId}", User.FindFirstValue(ClaimTypes.NameIdentifier));
                var result = await _userService.GetUserBookingsAsync(User, status, date, sort, page, pageSize);
                var response = new PaginatedResponse<BookingResponseDto>
                {
                    TotalItems = result.TotalItems,
                    Page = result.Page,
                    PageSize = result.PageSize,
                    Items = result.Items.Select(b => new BookingResponseDto
                    {
                        BookingId = b.BookingId,
                        FieldId = b.SubField.Field.FieldId, // Lấy FieldId từ SubField
                        FieldName = b.SubField.Field.FieldName, // Lấy FieldName từ SubField
                        SubFieldId = b.SubFieldId, // Thêm SubFieldId vào DTO
                        SubFieldName = b.SubField.SubFieldName, // Thêm SubFieldName vào DTO
                        BookingDate = b.BookingDate,
                        StartTime = b.StartTime,
                        EndTime = b.EndTime,
                        Status = b.Status,
                        PaymentStatus = b.PaymentStatus,
                        CreatedAt = b.CreatedAt.ToString("yyyy-MM-ddTHH:mm:ssZ")
                    }).ToList()
                };
                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting bookings for user: {UserId}", User.FindFirstValue(ClaimTypes.NameIdentifier));
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpDelete("profile")]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        public async Task<IActionResult> DeactivateProfile()
        {
            try
            {
                _logger.LogInformation("Deactivating profile for user: {UserId}", User.FindFirstValue(ClaimTypes.NameIdentifier));
                await _userService.DeactivateUserAsync(User);
                return Ok(new { Success = true, Message = "Xóa tài khoản thành công" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error deactivating profile for user: {UserId}", User.FindFirstValue(ClaimTypes.NameIdentifier));
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpGet("favorite-fields")]
        [ProducesResponseType(typeof(PaginatedResponse<FavoriteFieldResponseDto>), 200)]
        [ProducesResponseType(400)]
        public async Task<IActionResult> GetFavoriteFields(
            [FromQuery] string sort = "AddedDate:desc",
            [FromQuery] int page = 1,
            [FromQuery] int pageSize = 10)
        {
            try
            {
                if (page < 1 || pageSize < 1)
                {
                    return BadRequest(new { Error = "Số trang và kích thước trang phải lớn hơn 0" });
                }

                _logger.LogInformation("Getting favorite fields for user: {UserId}", User.FindFirstValue(ClaimTypes.NameIdentifier));
                var result = await _userService.GetFavoriteFieldsAsync(User, sort, page, pageSize);
                var response = new PaginatedResponse<FavoriteFieldResponseDto>
                {
                    TotalItems = result.TotalItems,
                    Page = result.Page,
                    PageSize = result.PageSize,
                    Items = result.Items.Select(ff => new FavoriteFieldResponseDto
                    {
                        FieldId = ff.FieldId,
                        FieldName = ff.Field.FieldName,
                        SportType = ff.Field.Sport.SportName,
                        Location = ff.Field.Address,
                        Phone = ff.Field.Phone,
                        OpenHours = ff.Field.OpenHours,
                        AddedDate = ff.AddedDate.ToString("yyyy-MM-ddTHH:mm:ssZ")
                    }).ToList()
                };
                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting favorite fields for user: {UserId}", User.FindFirstValue(ClaimTypes.NameIdentifier));
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpPost("favorite-fields/{fieldId}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        public async Task<IActionResult> AddFavoriteField(int fieldId)
        {
            try
            {
                if (fieldId <= 0)
                {
                    return BadRequest(new { Error = "ID sân không hợp lệ" });
                }

                _logger.LogInformation("Adding field {FieldId} to favorites for user: {UserId}", fieldId, User.FindFirstValue(ClaimTypes.NameIdentifier));
                await _userService.AddFavoriteFieldAsync(User, fieldId);
                return Ok(new { Success = true, Message = "Đã thêm sân vào danh sách yêu thích" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error adding field {FieldId} to favorites for user: {UserId}", fieldId, User.FindFirstValue(ClaimTypes.NameIdentifier));
                return BadRequest(new { Error = ex.Message });
            }
        }

        [HttpDelete("favorite-fields/{fieldId}")]
        [ProducesResponseType(200)]
        [ProducesResponseType(400)]
        public async Task<IActionResult> RemoveFavoriteField(int fieldId)
        {
            try
            {
                if (fieldId <= 0)
                {
                    return BadRequest(new { Error = "ID sân không hợp lệ" });
                }

                _logger.LogInformation("Removing field {FieldId} from favorites for user: {UserId}", fieldId, User.FindFirstValue(ClaimTypes.NameIdentifier));
                await _userService.RemoveFavoriteFieldAsync(User, fieldId);
                return Ok(new { Success = true, Message = "Đã xóa sân khỏi danh sách yêu thích" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error removing field {FieldId} from favorites for user: {UserId}", fieldId, User.FindFirstValue(ClaimTypes.NameIdentifier));
                return BadRequest(new { Error = ex.Message });
            }
        }
    }
}